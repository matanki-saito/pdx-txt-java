import java.nio.file.Files

plugins {
    id 'java'
    id 'net.researchgate.release' version '2.8.1'
    id 'com.github.johnrengelman.shadow' version '7.1.0'
    id 'com.palantir.docker' version '0.26.0'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

dependencies {
    // アノテーションプリプロセッサ用
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'

    // 外部(このライブラリの利用者)に公開する依存関係
    // api

    // 外部(このライブラリの利用者)に公開せず、ライブラリ内の実装でのみ使う依存関係
    implementation 'info.picocli:picocli:4.6.3'
    implementation project(":lib")

    // コンパイル時にのみ必要となる依存関係(実行時にリークしてはならないもの)
    compileOnly 'org.projectlombok:lombok:1.18.16'

    // テストをコンパイルするために使用される依存関係
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.assertj:assertj-core:3.19.0'

    // テストコンパイル時にのみ必要となる依存関係(実行時にリークしてはならないもの)
    testCompileOnly 'org.projectlombok:lombok:1.18.16'

    // テストランタイムでのみ必要となる依存関係
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

jar {
    archiveBaseName.set(rootProject.name)
    manifest {
        attributes(
                'Implementation-Title': rootProject.name,
                'Implementation-Version': project.version,
                "Main-Class": "com.github.matanki_saito.rico_console.RicoConsole")
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
}

javadoc {
    options.encoding = 'UTF-8'
    options.addStringOption('-release', '17')
}

compileJava {
    options.encoding = 'UTF-8'
}

compileTestJava {
    options.encoding = 'UTF-8'
}

shadowJar {
    archiveVersion.set('')
}

docker {
    name "ghcr.io/matanki-saito/rico-con:" + version + "-con"
    // このプラグインを使うとdocker build contextはbuild/docker以下になる。この場所にあるものしかDockerfileで使えない。
    // 従って下記のように書いてbuild/docker以下にsrcを作り、Dockerfileで使うデータをここに置く
    copySpec.from(tasks.shadowJar.outputs.files.singleFile).into("src")
    copySpec.from("src/main/resources/docker-entrypoint.sh").into("src")
}

release {
    // [skip ci]をコメントに入れないと、無限ループする
    preTagCommitMessage = '[skip ci] [Gradle Release Plugin] - pre tag commit: '
    tagCommitMessage = '[skip ci] [Gradle Release Plugin] - creating tag: '
    newVersionCommitMessage = '[skip ci] [Gradle Release Plugin] - new version commit: '

    tagTemplate = 'con-${version}'

    git {
        requireBranch = 'main'
    }
}
